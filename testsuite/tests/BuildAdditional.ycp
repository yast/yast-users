{
    // testedfiles: Users.pm UserCache.pm UsersLDAP.pm

    import "Users";
    import "UsersCache";
    import "Mode";
    import "Directory";
    import "Progress";
    import "Report";

    // we need to read the real data from the system, not given in map for
    // dummy agent
    string tmpdir	= Directory::tmpdir;
    foreach (string file, [ "passwd", "group", "shadow" ], {
	string cmd	= sformat ("/bin/cp ./%1 %2/", file, tmpdir);
	SCR::Execute (.target.bash_output, cmd);
    });
    Users::SetBaseDirectory (tmpdir);
    Users::ReadLocal ();
    // passwd etc. read, now we can switch to the test mode

    map READ = $[
	"etc" : $[
	    "fstab": [],
	    "cryptotab": [],
	    "default": $[
		"useradd": $[
		    "home":	"/home",
		    "groups":	"audio,video",
		    "group":	100
		]
	    ],
	],
	"product": $[
		"features": $[
		    "USE_DESKTOP_SCHEDULER"	: "no",
		    "IO_SCHEDULER"		: "",
		    "ENABLE_AUTOLOGIN"		: "false",
		    "UI_MODE"			: "simple",
		    "EVMS_CONFIG"		: "no",
		    "INCOMPLETE_TRANSLATION_TRESHOLD"	: "99",
		]
	],
	"target": $[
	    "stat"	: $[],
	    "size"	: -1,
	],
    ];

    map WRITE = $[];
    map EXEC = $[
	"passwd" : $[
	    "init"	: true
	],
	"target" : $[
	    "bash"	: -1,
	],
    ];

    import "Testsuite";

    Testsuite::Dump ("==========================================================");
    Mode::SetTest ("test");

    Testsuite::Test (``(Users::Read ()), [READ, WRITE, EXEC], 0);

    Users::SelectGroupByName ("audio");

    map <string,any> group = Users::GetCurrentGroup ();
    Testsuite::Dump (sformat ("---- current group:\n %1", group));

    // only 'ii' is checked ('true' in the item)
    Testsuite::Dump ("---- create additional users list:\n");

    list additional = (list) Testsuite::Test (
	``(UsersCache::BuildAdditional (group)), [ READ, WRITE], 0);
}
