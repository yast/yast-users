/**
 * File:
 *  AddGroup.ycp
 *
 * Module:
 *  Users configurator
 *
 * Summary:
 *  Saving group tests.
 *
 * Authors:
 *  Jiri Suchomel <jsuchome@suse.cz>
 *
 */

{
    // testedfiles: Users.pm UsersLDAP.pm

    import "Directory";
    import "Users";
    import "UsersCache";
    import "Mode";
    import "Directory";
    import "Progress";
    import "Report";

    // we need to read the real data from the system, not given in map for
    // dummy agent
    string tmpdir	= Directory::tmpdir;
    foreach (string file, [ "passwd", "group", "shadow" ], {
	string cmd	= sformat ("/bin/cp ./%1 %2/", file, tmpdir);
	SCR::Execute (.target.bash_output, cmd);
    });
    Users::SetBaseDirectory (tmpdir);
    Users::ReadLocal ();
    // passwd etc. read, now we can switch to the test mode

    map READ = $[
	"product": $[
		"features": $[
		    "USE_DESKTOP_SCHEDULER"	: "no",
		    "ENABLE_AUTOLOGIN"		: "false",
		    "IO_SCHEDULER"		: "",
		    "EVMS_CONFIG"		: "no",
		    "UI_MODE"			: "simple",
		    "INCOMPLETE_TRANSLATION_TRESHOLD"	: "99",
		]
	],
	"etc" : $[
	    "fstab": [],
	    "cryptotab": [],
	    "default": $[
		"useradd": $[
		    "home":	"/home",
		    "groups":	"audio,video",
		    "group":	100
		]
	    ],
	],
	"target": $[
	    "size"	: -1,
	    "stat"	: $[],
	],
	/* To simulate NIS server, use target.size = 0 and this:
	"sysconfig": $[
	    "ypserv" : $[
		"YPPWD_SRCDIR"	: "/etc"
	    ]
	],
	*/
    ];

    map WRITE = $[];
    map EXEC = $[
	"passwd" : $[
	    "init"	: true
	],
	"target" : $[
	    "bash"	: 0,
	    "bash_output":$[
		"stdout": "",
	    ],
	],
    ];

    Mode::SetTest ("test");

    import "Testsuite";

    Testsuite::Dump ("==========================================================");
    Testsuite::Test (``(Users::Read ()), [READ, WRITE, EXEC], 0);

    Testsuite::Dump ( sformat ("local user names:\n %1", UsersCache::GetUsernames ("local")));
    Testsuite::Dump ( sformat ("local group names:\n %1", UsersCache::GetGroupnames ("local")));
    Testsuite::Dump (sformat ("---- current group:\n %1", Users::GetCurrentGroup ()));

    Testsuite::Test (``(Users::AddGroup ($[])), [READ, WRITE, EXEC], 0);

    Testsuite::Dump (sformat ("---- current group (empty add, to get default values):\n %1", Users::GetCurrentGroup ()));

    map <string,any> group = $[
	"gidNumber"	: 555,
	"cn"		: "testgrp",
	"userlist"	: $[ "hh" : 1 ],
	"password"	:"x",
	"type"		: "local",
	"what"		: "add_group"
    ];

    Testsuite::Test (``(Users::AddGroup (group)), [READ, WRITE, EXEC], 0);

    Testsuite::Dump (sformat ("---- current group (after rich add):\n %1", Users::GetCurrentGroup ()));

    EXEC ["target", "bash_output", "stdout"] = "testgrp";

    string error = (string) Testsuite::Test(``(Users::CheckGroup ($[])), [READ, WRITE, EXEC], 0);

    Testsuite::Dump (sformat ("---- check group after add:\n %1", error));

    Users::SelectUserByName ("hh");

    Testsuite::Dump (sformat ("---- user 'hh':\n %1", Users::GetCurrentUser ()));

    Testsuite::Test(``(Users::CommitGroup ()), [READ, WRITE, EXEC], 0);

    Users::SelectUserByName ("hh");

    Testsuite::Dump (sformat ("---- user 'hh':\n %1", Users::GetCurrentUser ()));

    Testsuite::Dump ("==========================================================");

    Testsuite::Dump ( sformat ("local group names:\n %1", UsersCache::GetGroupnames ("local")));

    Testsuite::Dump ("================= gid conflict (not fatal any more) ======");

    EXEC ["target", "bash_output", "stdout"] = "new";

    Testsuite::Test (``(Users::AddGroup ($[])), [READ, WRITE, EXEC], 0);
    Testsuite::Test (``(Users::AddGroup ($[ "cn" : "new", "gidNumber": 0, "type": "system"])),
	[READ, WRITE, EXEC], 0);

    Testsuite::Dump (sformat ("---- current group after add:\n %1", Users::GetCurrentGroup ()));

    error = (string) Testsuite::Test(``(Users::CheckGroup ($[])), [READ, WRITE, EXEC], 0);

    Testsuite::Dump (sformat ("---- check group after add:\n %1", error));

    Testsuite::Dump ("================= name conflict ==========================");

    EXEC ["target", "bash_output", "stdout"] = "testgrp";

    Testsuite::Test (``(Users::AddGroup ($[])), [READ, WRITE, EXEC], 0);
    Testsuite::Test (``(Users::AddGroup ($[ "cn" : "testgrp"])), [], 0);

    Testsuite::Dump (sformat ("---- current group after add):\n %1", Users::GetCurrentGroup ()));

    error = (string) Testsuite::Test(``(Users::CheckGroup ($[])), [READ, WRITE, EXEC], 0);

    Testsuite::Dump (sformat ("---- check group after add:\n %1", error));

    Testsuite::Dump ("================= name too short =========================");

    Testsuite::Test (``(Users::AddGroup ($[])), [READ, WRITE, EXEC], 0);
    Testsuite::Test (``(Users::AddGroup ($[ "cn" : "t"])), [], 0);

    Testsuite::Dump (sformat ("---- current group after add:\n %1", Users::GetCurrentGroup ()));

    error = (string) Testsuite::Test(``(Users::CheckGroup ($[])), [READ, WRITE, EXEC], 0);

    Testsuite::Dump (sformat ("---- check group after add:\n %1", error));
}
