/**
 * File		: YaPIGroupAdd.ycp
 * Module	: Users configurator
 * Summary	: Test of USERS::GroupAdd function
 * Author	: Jiri Suchomel <jsuchome@suse.cz>
 *
 * $Id$
 */

{
    // testedfiles: Users.pm UsersCache.pm USERS.pm


    import "Directory";
    import "Mode";
    import "Users";
    import "UsersPasswd";
    import "YaPI::USERS";

    string tmpdir	= Directory::tmpdir;
    foreach (string file, [ "passwd", "group", "shadow" ], {
	SCR::Execute (.target.bash, sformat ("/bin/cp ./%1 %2/", file, tmpdir));
    });
    Users::SetBaseDirectory (tmpdir);
    Users::ReadLocal ();

    import "Testsuite";

    map R = $[
	"etc" : $[
	    "fstab": [],
	    "cryptotab": [],
	    "default": $[
		"useradd": $[
		    "home":	"/tmp/local/home",
		    "groups":	"audio,video",
		    "expire":	nil,
		    "group":	100
		]
	    ],
	],
	"target": $[
	    "stat"	: $[],
	    "size"	: -1,
	    "tmpdir"	: "/tmp/YaST"
	],
	"product": $[
		"features": $[
		    "USE_DESKTOP_SCHEDULER"	: "no",
		    "ENABLE_AUTOLOGIN"		: "false",
		    "IO_SCHEDULER"		: "",
		    "UI_MODE"			: "simple",
		    "EVMS_CONFIG"		: "no",
		    "INCOMPLETE_TRANSLATION_TRESHOLD"	: "99",
		]
	],
    ];
    map W = $[];
    map E = $[
	"passwd" : $[
	    "init"	: true
	],
	"target": $[
	    "mkdir"	: true,
	    "bash"	: 0,
	    "bash_output": $[],
	]
    ];

    Testsuite::Dump ("==========================================================");

    Mode::SetTest ("test");

    Testsuite::Test (``(Users::SetBaseDirectory ("/etc")), [], 0);
    Testsuite::Test (``(UsersPasswd::SetBaseDirectory ("/etc")), [], 0);

    map<string,any> config_map  = $[];
    map<string,any> data_map    = $[
	"cn"	: "gg",
    ];
    E ["target", "bash_output", "stdout"] = "gg";

    Testsuite::Dump ("============ add new group 'gg': ==========================");
    Testsuite::Test (``(YaPI::USERS::GroupAdd (config_map, data_map)), [R,W,E], 0);
    Testsuite::Dump ("============ add new group 'gg' - done ====================");


    data_map ["userlist"]	= [ "hh" ];
    data_map ["cn"]		= "gg2";
    E ["target", "bash_output", "stdout"] = "gg2";

    Testsuite::Dump ("============ add new group 'gg2' with first userlist as list ==");
    Testsuite::Test (``(YaPI::USERS::GroupAdd (config_map, data_map)), [R,W,E], 0);
    Testsuite::Dump ("============ add new group 'gg2' - done ====================");

    data_map ["userlist"]	= $[
	"hh"	: 1,
	"ii"	: 1
    ];
    data_map ["cn"]		= "gg3";
    E ["target", "bash_output", "stdout"] = "gg3";

    Testsuite::Dump ("============ add new group 'gg3' with first userlist as map ==");
    Testsuite::Test (``(YaPI::USERS::GroupAdd (config_map, data_map)), [R,W,E], 0);
    Testsuite::Dump ("============ add new group 'gg3' - done ====================");

    data_map ["userlist"]	= $[
	"hh2"	: 1,
    ];
    data_map ["cn"]		= "gg4";
    E ["target", "bash_output", "stdout"] = "gg4";

    Testsuite::Dump ("============ add new group 'gg4' with non existent user ==");
    Testsuite::Test (``(YaPI::USERS::GroupAdd (config_map, data_map)), [R,W,E], 0);
    Testsuite::Dump ("============ add new group 'gg4' - done ====================");

    Testsuite::Dump ("============ add new group 'root' (groupname conflict): ======");

    data_map	= $[
	"cn"	: "root"
    ];
    E ["target", "bash_output", "stdout"] = "root";

    string error = (string)
	Testsuite::Test (``(YaPI::USERS::GroupAdd (config_map, data_map)), [R,W,E], 0);
    Testsuite::Dump (sformat ("------------ GroupAdd return value:\n%1", error));

    Testsuite::Dump ("============ add new group 'root' - done ====================");
    Testsuite::Dump ("==========================================================");
}
