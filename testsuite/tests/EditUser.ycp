/**
 * File		: EditUser.ycp
 * Module	: Users configurator
 * Summary	: Test of Users::EditUser function
 * Author	: Jiri Suchomel <jsuchome@suse.cz>
 *
 * $Id$
 */

{
    // testedfiles: Users.pm UsersPasswd.pm UsersLDAP.pm UsersRoutines.pm UsersSimple.pm

    import "Directory";
    import "Mode";
    import "Users";
    import "UsersPasswd";

    string tmpdir	= Directory::tmpdir;
    foreach (string file, [ "passwd", "group", "shadow" ], {
	string cmd	= sformat ("/bin/cp ./%1 %2/", file, tmpdir);
	SCR::Execute (.target.bash_output, cmd);
    });
    Users::SetBaseDirectory (tmpdir);
    Users::ReadLocal ();

    map READ = $[
	"etc" : $[
	    "fstab": [],
	    "cryptotab": [],
	    "default": $[
		"useradd": $[
		    "home":	"/home",
		    "groups":	"audio,video",
		    "group":	100
		]
	    ],
	],
	"target": $[
	    "stat"	: $[],
	    "size"	: -1,
	    "tmpdir"	: "/tmp/YaST"
	],
	"product": $[
		"features": $[
		    "USE_DESKTOP_SCHEDULER"	: "no",
		    "IO_SCHEDULER"		: "",
		    "ENABLE_AUTOLOGIN"		: "false",
		    "UI_MODE"			: "simple",
		    "EVMS_CONFIG"		: "no",
		    "INCOMPLETE_TRANSLATION_TRESHOLD"	: "99",
		]
	],
	"anyxml"	: nil,
    ];
    map WRITE = $[];
    map EXEC = $[
	"passwd" : $[
	    "init"	: true
	],
	"target" : $[
	    "bash"		: 0,
	    "bash_output"	: $[],
	],
    ];
    map RW	= $[
	"target": $[
	    "stat"	: $["isdir":true],
	    "size"	: -1,
	    "tmpdir"	: "/tmp/YaST"
	],
    ];

    import "Testsuite";

    Testsuite::Dump ("==========================================================");

    Mode::SetTest ("test");

    Testsuite::Test (``(Users::Read ()), [READ, WRITE, EXEC], 0);

    // for home directory checks
    READ["target","stat","isdir"]	= true;

    Testsuite::Test (``(Users::SelectUserByName ("hh")), [], 0);

    Testsuite::Dump (sformat ("---- user 'hh':\n %1", Users::GetCurrentUser ()));

    map<string,any> changes = $[
	"uidNumber"	: 501,
    ];

    Testsuite::Test (``(Users::EditUser (changes)), [READ, WRITE, EXEC], 0);

    Testsuite::Dump (sformat ("---- user 'hh':\n %1", Users::GetCurrentUser ()));

    EXEC ["target", "bash_output", "stdout"] = "hh";

    string error = (string) Testsuite::Test(``(Users::CheckUser ($[])), [READ,WRITE,EXEC], 0);
    Testsuite::Dump (sformat ("---- check user after edit:\n %1", error));

    Testsuite::Dump ("---- commit user:");
    Testsuite::Test (``(Users::CommitUser ()), [READ, WRITE, EXEC], 0);

    Testsuite::Test (``(Users::SetBaseDirectory ("/etc")), [], 0);
    Testsuite::Test (``(UsersPasswd::SetBaseDirectory ("/etc")), [], 0);

    // home changed its owner because of uid change
    Testsuite::Test (``(Users::Write ()), [RW, WRITE, EXEC], 0);

    Testsuite::Test (``(Users::SelectUser (500)), [], 0);
    Testsuite::Dump (sformat ("---- user 500:\n %1", Users::GetCurrentUser ()));

    Testsuite::Test (``(Users::SelectUser (501)), [], 0);
    Testsuite::Dump (sformat ("---- user 501:\n %1", Users::GetCurrentUser ()));

    changes = $[
	"homeDirectory"	: "/new/home/hh",
    ];

    Testsuite::Test (``(Users::EditUser (changes)), [READ, WRITE, EXEC], 0);

    Testsuite::Dump (sformat ("---- user 'hh':\n %1", Users::GetCurrentUser ()));

    error = (string) Testsuite::Test(``(Users::CheckUser ($[])), [READ,WRITE,EXEC], 0);
    Testsuite::Dump (sformat ("---- check user after edit:\n %1", error));

    Testsuite::Dump ("---- commit user:");
    Testsuite::Test (``(Users::CommitUser ()), [READ, WRITE, EXEC], 0);

    // home directory was changed -> move it
    READ ["target", "stat"] = $[];

    Testsuite::Test (``(Users::Write ()), [READ, WRITE, EXEC], 0);

    Testsuite::Dump ("==========================================================");
}
