/**
 * File:
 *  DeleteUserCryptedDir.ycp
 *
 * Module:
 *  Users configurator
 *
 * Summary:
 *  Deleting user with encrypted directory
 *
 * Authors:
 *  Jiri Suchomel <jsuchome@suse.cz>
 *
 */

{
    // testedfiles: Users.pm UsersPasswd.pm UsersLDAP.pm UsersRoutines.pm

    import "Users";
    import "UsersPasswd";
    import "Mode";
    import "Directory";
    import "Progress";
    import "Report";

    string tmpdir	= Directory::tmpdir;
    foreach (string file, [ "passwd", "group", "shadow" ], {
	string cmd	= sformat ("/bin/cp ./%1 %2/", file, tmpdir);
	SCR::Execute (.target.bash_output, cmd);
    });
    Users::SetBaseDirectory (tmpdir);
    Users::ReadLocal ();

    map READ = $[
	"etc" : $[
	    "fstab": [],
	    "cryptotab": [],
	    "default": $[
		"useradd": $[
		    "home":	"/home",
		    "groups":	"audio,video",
		    "group":	100
		]
	    ],
	],
	"product": $[
		"features": $[
		    "USE_DESKTOP_SCHEDULER"	: "no",
		    "IO_SCHEDULER"		: "",
		    "ENABLE_AUTOLOGIN"		: "false",
		    "UI_MODE"			: "simple",
		    "EVMS_CONFIG"		: "no",
		    "INCOMPLETE_TRANSLATION_TRESHOLD"	: "99",
		]
	],
	"target": $[
	    "size":	-1,
	    "stat":	$[],
	],
    ];

    map WRITE = $[];
    map EXEC = $[
	"passwd" : $[
	    "init"	: true
	],
	"target" : $[
	    "bash"	: 0,
	    "bash_output"	: $[
		"exit"	: 0
	    ],
	],
    ];
    map RW	= $[
	"target": $[
	    "stat"	: $["isdir":true],
	    "size"	: -1,
	    "tmpdir"	: "/tmp/YaST"
	],
	"anyxml"	: $[
	    "pam_mount"	: [
		$[
		    "volume":	[
			$[
			    "user"	: "hh",
			    "path"	: "/home/hh.img",
			    "fskeypath"	: "/home/hh.key"
			]
		    ]
		]
	    ]
	]
    ];

    import "Testsuite";

    Mode::SetTest ("test");

    Testsuite::Test (``(Users::Read ()), [READ, WRITE, EXEC], 0);

    Testsuite::Test (``(Users::SelectUserByName ("hh")), [], 0);

    Testsuite::Dump (sformat ("---- user 'hh':\n %1", Users::GetCurrentUser ()));

    Testsuite::Dump ("==================== running delete ======================");

    Testsuite::Test(``(Users::DeleteUser (true)), [READ], 0);
    Testsuite::Test(``(Users::CommitUser ()), [READ], 0);

    Testsuite::Test (``(Users::SetBaseDirectory ("/etc")), [], 0);
    Testsuite::Test (``(UsersPasswd::SetBaseDirectory ("/etc")), [], 0);
    Testsuite::Test (``(Directory::ResetTmpDir ()), [RW, WRITE, EXEC], 0);

    Testsuite::Test (``(Users::Write ()), [RW, WRITE, EXEC], 0);

}
